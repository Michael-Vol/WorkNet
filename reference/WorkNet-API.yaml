openapi: 3.1.0
info:
    title: WorkNet API
    version: '1.0'
    summary: A Social Network for Professionals
servers:
    - url: 'http://localhost:3000'
paths:
    /users/signup:
        post:
            summary: Create New User
            operationId: post-user
            responses:
                '201':
                    description: User Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            examples:
                                New User:
                                    value:
                                        id: 12
                                        firstName: Bob
                                        lastName: Fellow
                                        email: bob.fellow@gmail.com
                                        dateOfBirth: '1996-08-24'
                                        emailVerified: false
                                        createDate: '2020-11-18'
                        application/xml:
                            schema:
                                type: object
                                properties: {}
                '400':
                    description: Missing Required Information
                '409':
                    description: Email Already Taken
                '500':
                    description: Internal Server Error
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                lastName:
                                    type: string
                                email:
                                    type: string
                                dateOfBirth:
                                    type: string
                                    format: date
                            required:
                                - firstName
                                - lastName
                                - email
                                - dateOfBirth
                        examples:
                            Create User Bob Fellow:
                                value:
                                    firstName: Bob
                                    lastName: Fellow
                                    email: bob.fellow@gmail.com
                                    dateOfBirth: '1996-08-24'
                description: Post the necessary fields for the API to create a new user.
            description: Creates a new user.
        parameters: []
    /users/login:
        post:
            summary: ''
            operationId: post-users-login
            responses:
                '200':
                    description: OK
                '401':
                    description: Unauthorized
                '500':
                    description: Internal Server Error
            description: Allows a user to login by providing the correct credentials (email & password).
    /users/me:
        parameters: []
        patch:
            summary: ''
            operationId: patch-profile
            responses:
                '200':
                    description: OK
            description: Update an existing user profile
        get:
            summary: ''
            operationId: get-users-me
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: {}
                            examples: {}
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: {}
                            examples:
                                example-1:
                                    value:
                                        message: User Not Found
                '500':
                    description: Internal Server Error
            description: Retrieves the user's info.
    /users/me/profile:
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-users-me-profile
            description: Retrieves a user's profile
        post:
            summary: ''
            operationId: post-users-me-profile
            responses:
                '200':
                    description: OK
            description: Creates a user's profile
        patch:
            summary: ''
            operationId: patch-users-me-profile
            responses:
                '200':
                    description: OK
            description: Updates a user's profile
    '/users/{user_id}/connect':
        parameters:
            - schema:
                  type: string
              name: user_id
              in: path
              required: true
              description: User ID
        post:
            summary: ''
            operationId: post-users-user_id-connect
            responses:
                '200':
                    description: OK
                '400':
                    description: Bad Request
                '500':
                    description: Internal Server Error
            description: Creates a new Connection Request to the user with the id of user_id.
        delete:
            summary: ''
            operationId: delete-users-user_id-connect
            responses:
                '200':
                    description: OK
            description: Deletes a connection request that has been sent to user with id of user_id.
        patch:
            summary: ''
            operationId: patch-users-user_id-connect
            responses:
                '200':
                    description: OK
            description: Accepts a new Connection Request to the user with the id of user_id.
    '/users/{user_id}/avatar':
        parameters:
            - schema:
                  type: string
              name: user_id
              in: path
              required: true
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-users-user_id-avatar
            description: Allows public access to a user's avatar.
    /users/me/avatar:
        post:
            summary: ''
            operationId: post-users-me-avatar
            responses:
                '200':
                    description: OK
            description: Allows user to upload an avatar to its personal info.
        delete:
            summary: ''
            operationId: delete-users-me-avatar
            responses:
                '200':
                    description: OK
            description: Allows user to delete avatar.
    /posts:
        get:
            summary: Your GET endpoint
            tags: []
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties: {}
                            examples: {}
            operationId: get-users-posts
            description: Retrieves all posts from a specific user.
        parameters: []
        post:
            summary: ''
            operationId: post-posts
            responses:
                '200':
                    description: OK
            description: Creates a new post.
    '/posts/{post_id}':
        parameters:
            - schema:
                  type: string
              name: post_id
              in: path
              required: true
              description: Post ID
        delete:
            summary: ''
            operationId: delete-post
            responses:
                '200':
                    description: OK
            description: Deletes a post
        patch:
            summary: ''
            operationId: patch-posts-post_id
            responses:
                '200':
                    description: OK
            description: Updates a specific post with id of post_id.
        get:
            summary: ''
            operationId: get-posts-post_id
            responses:
                '200':
                    description: OK
            description: Retrieves a specific post with an id of post_id
    '/posts/{post_id}/likes':
        post:
            summary: ''
            operationId: post-post-like
            responses:
                '200':
                    description: OK
            description: Like a post with id of post_id.
        delete:
            summary: ''
            operationId: delete-post-like
            responses:
                '200':
                    description: OK
            description: Delete a like from a post with an id of post_id.
        parameters:
            - schema:
                  type: string
              name: post_id
              in: path
              required: true
              description: Post ID
        get:
            summary: ''
            operationId: get-posts-post_id-like
            responses:
                '200':
                    description: OK
            description: Returns a list of users that have liked a post.
    '/posts/{post_id}/comments':
        post:
            summary: ''
            operationId: post-post-comment
            responses:
                '200':
                    description: OK
            description: Post a new comment to post with an id of post_id
        parameters:
            - schema:
                  type: string
              name: post_id
              in: path
              required: true
              description: Post ID
        get:
            summary: ''
            operationId: get-post-post_id-comments
            responses:
                '200':
                    description: OK
            description: Get all comments of a post with an id of post_id.
    '/posts/{post_id}/comments/{cmnt_id}':
        parameters:
            - schema:
                  type: string
              name: post_id
              in: path
              required: true
              description: Post ID
            - schema:
                  type: string
              name: cmnt_id
              in: path
              required: true
              description: Comment ID
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-post-post_id-comments-cmnt_id
            description: Get a specific comment of id cmnt_id of a post with an id of post_id.
        patch:
            summary: ''
            operationId: patch-post-post_id-comments-cmnt_id
            responses:
                '200':
                    description: OK
            description: Update a specific comment of id cmnt_id of a post with an id of post_id.
    /chats:
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-conversations
            description: Retrieves all chats of a specific user
        post:
            summary: ''
            operationId: post-conversations
            responses:
                '200':
                    description: OK
            description: Create New Chat
        parameters: []
    '/chats/{chat_id}/messages/{msg_id}':
        delete:
            summary: ''
            operationId: delete-conversation-message
            responses:
                '200':
                    description: OK
            description: Deletes a specific message of a chat.
        parameters:
            - schema:
                  type: string
              name: msg_id
              in: path
              required: true
              description: Message ID
            - schema:
                  type: string
              name: chat_id
              in: path
              required: true
        get:
            summary: ''
            operationId: get-conversations-conv_id-messages-msg_id
            responses:
                '200':
                    description: OK
            description: Retrieves a specific message of a Chat.
    '/chats/{chat_id}/messages':
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-messages
            description: Retrieves all messages of a chat.
            parameters: []
        parameters:
            - schema:
                  type: string
              name: chat_id
              in: path
              required: true
        post:
            summary: ''
            operationId: post-conversations-conv_id-messages
            responses:
                '200':
                    description: OK
            description: Creates a new message for a specific chat.
    '/chats/{chat_id}':
        parameters:
            - schema:
                  type: string
              name: chat_id
              in: path
              required: true
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-conversations-conv_id
            description: Retrieves a specific chat with an id of chat_id.
        delete:
            summary: ''
            operationId: delete-conversations-conv_id
            responses:
                '200':
                    description: OK
            description: Deletes a specific chat with an id of chat_id.
        patch:
            summary: ''
            operationId: patch-conversations-conv_id
            responses:
                '200':
                    description: OK
            description: Updates a specific chat with an id of chat_id.
    /job_postings:
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-job_postings
            description: Retrieves all job postings of all users
        post:
            summary: ''
            operationId: post-job_postings
            responses:
                '200':
                    description: OK
            description: Creates a new job post.
    '/job_postings/{job_id}':
        parameters:
            - schema:
                  type: string
              name: job_id
              in: path
              required: true
              description: Job Post ID
        get:
            summary: Your GET endpoint
            tags: []
            responses: {}
            operationId: get-job_postings-job_id
            description: Retrieves a specific job post.
        delete:
            summary: ''
            operationId: delete-job_postings-job_id
            responses:
                '200':
                    description: OK
            description: Deletes a specific job post.
        patch:
            summary: ''
            operationId: patch-job_postings-job_id
            responses:
                '200':
                    description: OK
            description: Updates a specific job_post.
components:
    schemas:
        User:
            title: User
            type: object
            description: ''
            examples:
                - id: 142
                  firstName: Alice
                  lastName: Smith
                  email: alice.smith@gmail.com
                  dateOfBirth: '1997-10-31'
                  emailVerified: true
                  signUpDate: '2019-08-24'
            properties:
                id:
                    type: integer
                    description: Unique identifier for the given user.
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                    format: email
                dateOfBirth:
                    type: string
                    format: date
                    example: '1997-10-31'
                isAdmin:
                    type: boolean
                password:
                    type: string
                phone number:
                    type: integer
                avatar:
                    type: string
            required:
                - id
                - firstName
                - lastName
                - email
        Post:
            title: Posts
            type: object
            properties:
                id:
                    type: string
                body:
                    type: string
                user:
                    $ref: '#/components/schemas/User'
        Comment:
            title: Comment
            type: object
            properties:
                id:
                    type: string
                user:
                    $ref: '#/components/schemas/User'
                post:
                    $ref: '#/components/schemas/Post'
                body:
                    type: string
        Likes:
            title: Likes
            type: object
            properties:
                id:
                    type: string
                user:
                    $ref: '#/components/schemas/User'
                post:
                    $ref: '#/components/schemas/Post'
        Profile:
            title: Profile
            type: object
            properties:
                id:
                    type: string
                bio:
                    type: string
                Work Experience:
                    type: array
                    items:
                        type: string
                user:
                    $ref: '#/components/schemas/User'
                Education:
                    type: array
                    items:
                        type: string
                Employer:
                    type: string
                publicInfo:
                    type: array
                    items:
                        type: string
        Chats:
            title: Chats
            type: object
            description: ''
            properties:
                id:
                    type: string
                userOne:
                    $ref: '#/components/schemas/User'
                userTwo:
                    $ref: '#/components/schemas/User'
                messages:
                    type: array
                    items:
                        $ref: '#/components/schemas/Message'
        Message:
            title: Messages
            type: object
            properties:
                id:
                    type: string
                chat:
                    $ref: '#/components/schemas/Chats'
                body:
                    type: string
                sender:
                    $ref: '#/components/schemas/User'
        Job-Posting:
            title: Listings
            type: object
            properties:
                id:
                    type: string
                Title:
                    type: string
                Body:
                    type: string
                Creator:
                    $ref: '#/components/schemas/User'
        Connection-Requests:
            title: Connection-Requests
            type: object
            properties:
                id:
                    type: string
                sender:
                    $ref: '#/components/schemas/User'
                receiver:
                    $ref: '#/components/schemas/User'
                status:
                    type: string
                '':
                    type: string
